version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:
  run-lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      - run:
          name: Run Lint
          command: |
            hadolint Dockerfile

  docker-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push to Docker Hub
          command: |
            dockerpath=duongvcn/udacity:${CIRCLE_WORKFLOW_ID:0:7}
            docker build -t $dockerpath .
            docker image ls
            echo "Docker ID and Image: $dockerpath"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
            echo "Docker tag Image: $dockerpath"
            docker tag $dockerpath $dockerpath
            echo "Docker push Image: $dockerpath"
            docker push $dockerpath
  
  setup-cluster:   
      executor: aws-eks/python3
      steps:
        - checkout
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - run:
            name: Install the eksctl tool
            command: |
              if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download
        - aws-eks/create-cluster:
            cluster-name: aws-devops-auto
            aws-region: $AWS_DEFAULT_REGION   
            node-type: t2.micro

  create-deployment:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y curl unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: set-credential
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set region $AWS_DEFAULT_REGION
      - kubernetes/install-kubectl
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: aws-devops-auto
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: eks/deployment.yaml
          show-kubectl-command: true
          resource-name: deployment/udacity-deployment
        
  test-application:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: aws-devops-auto
          install-kubectl: true
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get nodes
            kubectl get pods
            kubectl get services

  set-loadbalancer:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: aws-devops-auto
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: eks/loadbalancer.yaml
          show-kubectl-command: true
          resource-name: deployment/udacity-deployment         
      - run:
          name: Wait for LB to be ready
          command: |         
            kubectl get service/udacity-svc

workflows:
  default:
    jobs:
      - run-lint
      - docker-image:
          requires:
            - run-lint
      - setup-cluster:
          requires:
            - docker-image
      - create-deployment:
          requires:
            - setup-cluster
          filters: 
            branches:
              only: [master]
      - test-application:
          requires:
            - create-deployment
      - set-loadbalancer:
          requires:
            - test-application
