version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

jobs:

#  ------------------------------------------------------------------------------------------------------------------------------------------
#  To lint the Dockerfile
#  ------------------------------------------------------------------------------------------------------------------------------------------

    run-lint:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |
              sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
              sudo chmod +x /bin/hadolint
        - run:
            name: Run Lint
            command: |
              hadolint Dockerfile
              
#  ------------------------------------------------------------------------------------------------------------------------------------------
#  Build the Dockerimage for the application 
#  ------------------------------------------------------------------------------------------------------------------------------------------

    build-docker-image:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout

        - setup_remote_docker:
            version: 19.03.13

        - run:
            name: Build Docker Image
            command: |
              export TAG=latest
              export IMAGE_NAME=udacity
              docker build -t duongvcn/$IMAGE_NAME:$TAG .
              
#  -------------------------------------------------------------------------------------------------------------------------------------------
#  Push the Dockerimage into DockerHub
#  ------------------------------------------------------------------------------------------------------------------------------------------

    push-docker-image:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - setup_remote_docker:
            version: 19.03.13
        - run:
            name: Push Docker Image to Docker Hub
            command: |
              export TAG=latest
              export IMAGE_NAME=udacity
              docker build -t duongvcn/$IMAGE_NAME:$TAG .
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
              docker push duongvcn/$IMAGE_NAME:$TAG

#  -------------------------------------------------------------------------------------------------------------------------------------------
#  Push the Image into ECR
#  ------------------------------------------------------------------------------------------------------------------------------------------
    push-ecr-image:
      docker:
        - image: 'cimg/base:stable'
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update
              sudo apt-get install -y curl unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
        - run:
            name: set-credential
            command: |
              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
              aws configure set aws_session_token $AWS_SESSION_TOKEN
              aws configure set region $AWS_DEFAULT_REGION
        - run:
            name: Push image to ECR
            command: |
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 526532159872.dkr.ecr.us-east-1.amazonaws.com
              

# ----------------------------------------------------------------------------------------------------------------------------------------
# Deploy the application from AWS ECR image to AWS EKS
# ---------------------------------------------------------------------------------------------------------------------------------------
    deploy-application:
      docker:
      - image: 'cimg/python:3.10'
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-cluster
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION
        - kubernetes/create-or-update-resource:
            resource-file-path: "deployments/deployment.yml"
            resource-name: deployment/udacity

    test-application:
      docker:
      - image: 'cimg/python:3.10'
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-cluster
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION
        - run:
            name: Wait for service to be ready
            command: |
              kubectl get pods
              kubectl get services
# ----------------------------------------------------------------------------------------------------------------------------------  
#  To create  LoadBalancer URL for the application as aws-eks orb is not creating LoadBalancer by default
# ----------------------------------------------------------------------------------------------------------------------------------  
    set-loadbalancer:
      docker:
      - image: 'cimg/python:3.10'
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-cluster
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION
        - kubernetes/create-or-update-resource:
            resource-file-path: "eks/loadbalancer.yml"
            resource-name: deployment/udacity
        - run:
            name: Wait for LB to be ready
            command: |         
              kubectl get service/udacity-service-loadbalancer     

# ----------------------------------------------------------------------------------------------------------------------------------------
# Start of Workflow
# ----------------------------------------------------------------------------------------------------------------------------------------
     
workflows:
  default:
    jobs:
      - run-lint
      
      - build-docker-image:
          requires:
            - run-lint
      
      - push-docker-image:
          requires:
            - build-docker-image
      
      - push-ecr-image:
          requires:
            - push-docker-image

      - deploy-application:
            requires:
              - push-ecr-image
      
      - test-application:
          requires:
            - deploy-application
            
      - set-loadbalancer:
          requires:
            - test-application